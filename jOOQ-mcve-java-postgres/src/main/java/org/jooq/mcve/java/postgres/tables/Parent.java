/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.postgres.Indexes;
import org.jooq.mcve.java.postgres.Keys;
import org.jooq.mcve.java.postgres.Mcve;
import org.jooq.mcve.java.postgres.tables.records.ParentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Parent extends TableImpl<ParentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.parent</code>
     */
    public static final Parent PARENT = new Parent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParentRecord> getRecordType() {
        return ParentRecord.class;
    }

    /**
     * The column <code>mcve.parent.parent_id</code>.
     */
    public final TableField<ParentRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Parent(Name alias, Table<ParentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Parent(Name alias, Table<ParentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.parent</code> table reference
     */
    public Parent(String alias) {
        this(DSL.name(alias), PARENT);
    }

    /**
     * Create an aliased <code>mcve.parent</code> table reference
     */
    public Parent(Name alias) {
        this(alias, PARENT);
    }

    /**
     * Create a <code>mcve.parent</code> table reference
     */
    public Parent() {
        this(DSL.name("parent"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PARENT_UX);
    }

    @Override
    public Identity<ParentRecord, Long> getIdentity() {
        return (Identity<ParentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ParentRecord> getPrimaryKey() {
        return Keys.PARENT_PK;
    }

    @Override
    public Parent as(String alias) {
        return new Parent(DSL.name(alias), this);
    }

    @Override
    public Parent as(Name alias) {
        return new Parent(alias, this);
    }

    @Override
    public Parent as(Table<?> alias) {
        return new Parent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Parent rename(String name) {
        return new Parent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Parent rename(Name name) {
        return new Parent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Parent rename(Table<?> name) {
        return new Parent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parent where(Condition condition) {
        return new Parent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Parent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Parent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
