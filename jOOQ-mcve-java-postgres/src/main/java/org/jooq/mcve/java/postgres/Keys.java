/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.mcve.java.postgres.tables.Child;
import org.jooq.mcve.java.postgres.tables.Nanny;
import org.jooq.mcve.java.postgres.tables.Parent;
import org.jooq.mcve.java.postgres.tables.records.ChildRecord;
import org.jooq.mcve.java.postgres.tables.records.NannyRecord;
import org.jooq.mcve.java.postgres.tables.records.ParentRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * mcve.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ChildRecord> CHILD_PKEY = Internal.createUniqueKey(Child.CHILD, DSL.name("child_pkey"), new TableField[] { Child.CHILD.CHILD_ID }, true);
    public static final UniqueKey<NannyRecord> NANNY_PKEY = Internal.createUniqueKey(Nanny.NANNY, DSL.name("nanny_pkey"), new TableField[] { Nanny.NANNY.NANNY_ID }, true);
    public static final UniqueKey<ParentRecord> PARENT_PKEY = Internal.createUniqueKey(Parent.PARENT, DSL.name("parent_pkey"), new TableField[] { Parent.PARENT.PARENT_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ChildRecord, ParentRecord> CHILD__CHILD_PARENT_ID_FKEY = Internal.createForeignKey(Child.CHILD, DSL.name("child_parent_id_fkey"), new TableField[] { Child.CHILD.PARENT_ID }, Keys.PARENT_PKEY, new TableField[] { Parent.PARENT.PARENT_ID }, true);
    public static final ForeignKey<NannyRecord, ChildRecord> NANNY__NANNY_CHILD_ID_FKEY = Internal.createForeignKey(Nanny.NANNY, DSL.name("nanny_child_id_fkey"), new TableField[] { Nanny.NANNY.CHILD_ID }, Keys.CHILD_PKEY, new TableField[] { Child.CHILD.CHILD_ID }, true);
}
