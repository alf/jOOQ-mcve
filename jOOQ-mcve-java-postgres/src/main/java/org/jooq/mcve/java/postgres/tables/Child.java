/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.postgres.Keys;
import org.jooq.mcve.java.postgres.Mcve;
import org.jooq.mcve.java.postgres.tables.Nanny.NannyPath;
import org.jooq.mcve.java.postgres.tables.Parent.ParentPath;
import org.jooq.mcve.java.postgres.tables.records.ChildRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Child extends TableImpl<ChildRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.child</code>
     */
    public static final Child CHILD = new Child();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChildRecord> getRecordType() {
        return ChildRecord.class;
    }

    /**
     * The column <code>mcve.child.child_id</code>.
     */
    public final TableField<ChildRecord, Long> CHILD_ID = createField(DSL.name("child_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.child.parent_id</code>.
     */
    public final TableField<ChildRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Child(Name alias, Table<ChildRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Child(Name alias, Table<ChildRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.child</code> table reference
     */
    public Child(String alias) {
        this(DSL.name(alias), CHILD);
    }

    /**
     * Create an aliased <code>mcve.child</code> table reference
     */
    public Child(Name alias) {
        this(alias, CHILD);
    }

    /**
     * Create a <code>mcve.child</code> table reference
     */
    public Child() {
        this(DSL.name("child"), null);
    }

    public <O extends Record> Child(Table<O> path, ForeignKey<O, ChildRecord> childPath, InverseForeignKey<O, ChildRecord> parentPath) {
        super(path, childPath, parentPath, CHILD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChildPath extends Child implements Path<ChildRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ChildPath(Table<O> path, ForeignKey<O, ChildRecord> childPath, InverseForeignKey<O, ChildRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ChildPath(Name alias, Table<ChildRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChildPath as(String alias) {
            return new ChildPath(DSL.name(alias), this);
        }

        @Override
        public ChildPath as(Name alias) {
            return new ChildPath(alias, this);
        }

        @Override
        public ChildPath as(Table<?> alias) {
            return new ChildPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<ChildRecord, Long> getIdentity() {
        return (Identity<ChildRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChildRecord> getPrimaryKey() {
        return Keys.CHILD_PKEY;
    }

    @Override
    public List<ForeignKey<ChildRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHILD__CHILD_PARENT_ID_FKEY);
    }

    private transient ParentPath _parent;

    /**
     * Get the implicit join path to the <code>mcve.parent</code> table.
     */
    public ParentPath parent() {
        if (_parent == null)
            _parent = new ParentPath(this, Keys.CHILD__CHILD_PARENT_ID_FKEY, null);

        return _parent;
    }

    private transient NannyPath _nanny;

    /**
     * Get the implicit to-many join path to the <code>mcve.nanny</code> table
     */
    public NannyPath nanny() {
        if (_nanny == null)
            _nanny = new NannyPath(this, null, Keys.NANNY__NANNY_CHILD_ID_FKEY.getInverseKey());

        return _nanny;
    }

    @Override
    public Child as(String alias) {
        return new Child(DSL.name(alias), this);
    }

    @Override
    public Child as(Name alias) {
        return new Child(alias, this);
    }

    @Override
    public Child as(Table<?> alias) {
        return new Child(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Child rename(String name) {
        return new Child(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Child rename(Name name) {
        return new Child(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Child rename(Table<?> name) {
        return new Child(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Child where(Condition condition) {
        return new Child(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Child where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Child where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Child where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Child where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Child where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Child where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Child where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Child whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Child whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
