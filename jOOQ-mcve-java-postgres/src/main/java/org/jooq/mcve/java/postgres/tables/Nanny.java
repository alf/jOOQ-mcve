/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.postgres.Keys;
import org.jooq.mcve.java.postgres.Mcve;
import org.jooq.mcve.java.postgres.tables.Child.ChildPath;
import org.jooq.mcve.java.postgres.tables.records.NannyRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Nanny extends TableImpl<NannyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.nanny</code>
     */
    public static final Nanny NANNY = new Nanny();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NannyRecord> getRecordType() {
        return NannyRecord.class;
    }

    /**
     * The column <code>mcve.nanny.nanny_id</code>.
     */
    public final TableField<NannyRecord, Long> NANNY_ID = createField(DSL.name("nanny_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mcve.nanny.child_id</code>.
     */
    public final TableField<NannyRecord, Long> CHILD_ID = createField(DSL.name("child_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Nanny(Name alias, Table<NannyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Nanny(Name alias, Table<NannyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.nanny</code> table reference
     */
    public Nanny(String alias) {
        this(DSL.name(alias), NANNY);
    }

    /**
     * Create an aliased <code>mcve.nanny</code> table reference
     */
    public Nanny(Name alias) {
        this(alias, NANNY);
    }

    /**
     * Create a <code>mcve.nanny</code> table reference
     */
    public Nanny() {
        this(DSL.name("nanny"), null);
    }

    public <O extends Record> Nanny(Table<O> path, ForeignKey<O, NannyRecord> childPath, InverseForeignKey<O, NannyRecord> parentPath) {
        super(path, childPath, parentPath, NANNY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NannyPath extends Nanny implements Path<NannyRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> NannyPath(Table<O> path, ForeignKey<O, NannyRecord> childPath, InverseForeignKey<O, NannyRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NannyPath(Name alias, Table<NannyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NannyPath as(String alias) {
            return new NannyPath(DSL.name(alias), this);
        }

        @Override
        public NannyPath as(Name alias) {
            return new NannyPath(alias, this);
        }

        @Override
        public NannyPath as(Table<?> alias) {
            return new NannyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<NannyRecord, Long> getIdentity() {
        return (Identity<NannyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NannyRecord> getPrimaryKey() {
        return Keys.NANNY_PKEY;
    }

    @Override
    public List<ForeignKey<NannyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NANNY__NANNY_CHILD_ID_FKEY);
    }

    private transient ChildPath _child;

    /**
     * Get the implicit join path to the <code>mcve.child</code> table.
     */
    public ChildPath child() {
        if (_child == null)
            _child = new ChildPath(this, Keys.NANNY__NANNY_CHILD_ID_FKEY, null);

        return _child;
    }

    @Override
    public Nanny as(String alias) {
        return new Nanny(DSL.name(alias), this);
    }

    @Override
    public Nanny as(Name alias) {
        return new Nanny(alias, this);
    }

    @Override
    public Nanny as(Table<?> alias) {
        return new Nanny(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nanny rename(String name) {
        return new Nanny(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nanny rename(Name name) {
        return new Nanny(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nanny rename(Table<?> name) {
        return new Nanny(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nanny where(Condition condition) {
        return new Nanny(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nanny where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nanny where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nanny where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nanny where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nanny where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nanny where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Nanny where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nanny whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Nanny whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
